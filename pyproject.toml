[project]
name = "meetingmuse"
version = "0.1.0"
description = ""
authors = [
    {name = "thisisasl",email = "arjunslife@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0.0"
dependencies = [
    "langgraph (>=0.5.1,<0.6.0)",
    "langsmith (>=0.4.4,<0.5.0)",
    "langchain-ollama (>=0.3.3,<0.4.0)",
    "ipython (>=9.4.0,<10.0.0)",
    "graphviz (>=0.20.0,<1.0.0)",
    "pydot (>=2.0.0,<3.0.0)",
    "langchain-huggingface (>=0.3.0,<0.4.0)",
    "dotenv (>=0.9.9,<0.10.0)",
    "langchain-core (>=0.3.68,<0.4.0)",
    "fastapi (>=0.104.0,<1.0.0)",
    "uvicorn[standard] (>=0.24.0,<1.0.0)",
    "pydantic (>=2.0.0,<3.0.0)",
    "google-auth (>=2.0.0,<3.0.0)",
    "google-auth-oauthlib (>=1.0.0,<2.0.0)",
    "google-api-python-client (>=2.0.0,<3.0.0)",
    "cryptography (>=41.0.0,<42.0.0)",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "meetingmuse"
version = "0.1.0"
description = "Your favourite calendar bot!"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [
    {include ="meetingmuse", from = "src"},
    {include ="server", from = "src"},
    {include ="common", from = "src"},
    {include = "scripts"}
]


[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-mock = "^3.10"
pytest-asyncio = "^0.21"
black = "^23.0"
isort = "^5.12"
flake8 = "^6.0"
pylint = "^3.0"
mypy = "^1.0"
pre-commit = "^3.0"
autoflake = "^2.3.1"
detect-secrets = "^1.5.0"
pyppeteer = "^2.0.0"
types-requests = "^2.31.0"

[tool.poetry.scripts]
meetingmuse = "main:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--durations=10"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
minversion = "6.0"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["meetingmuse"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "langchain_huggingface.*",
    "google_auth_oauthlib.*"
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "logging-fstring-interpolation",
    "duplicate-code",
    "fixme"
]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "df"]

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
